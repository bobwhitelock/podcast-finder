# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: podcast-finder

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6
  region: eu-west-2

  environment:
    AUDIOSEARCH_ID: "${self:custom.secrets.AUDIOSEARCH_ID}"
    AUDIOSEARCH_SECRET: "${self:custom.secrets.AUDIOSEARCH_SECRET}"
    EMAIL_SEND_ADDRESS: "${self:custom.secrets.EMAIL_SEND_ADDRESS}"
    API_DOMAIN_NAME: "${self:custom.secrets.API_DOMAIN_NAME}"

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

package:
  include:
    - functions/search.py
    - functions/request_notification.py
  exclude:
    - ./**

#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

plugins:
  - serverless-domain-manager
  - serverless-python-requirements


custom:
  stage: ${opt:stage, self:provider.stage}
  secrets: ${file(secrets.yml):${self:custom.stage}}

  customDomain:
    domainName: api.podcast-finder.bobwhitelock.co.uk
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true

  pythonRequirements:
    noDeploy:
      - Jinja2
      - MarkupSafe
      - Pygments
      - Werkzeug
      - asn1crypto
      - aws-xray-sdk
      - boto
      - cffi
      - cookies
      - cryptography
      - decorator
      - docker
      - docker-pycreds
      - ipython
      - ipython-genutils
      - jedi
      - jsonpickle
      - mock
      - moto
      - parso
      - pbr
      - pexpect
      - pickleshare
      - prompt-toolkit
      - ptyprocess
      - py
      - pyaml
      - pycparser
      - pytest
      - pytest-mock
      - pytz
      - simplegeneric
      - six
      - traitlets
      - virtualenv
      - wcwidth
      - websocket-client
      - wrapt
      - xmltodict

functions:
  search:
    handler: functions/search.main
    events:
      - http:
          path: search
          method: get
          cors: true

  request_notification:
    handler: functions/request_notification.main
    events:
      - http:
          path: request-notification
          method: post
          cors: true

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
